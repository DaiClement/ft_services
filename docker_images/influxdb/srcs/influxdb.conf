# Telegraf Configuration
# 
# Telegraf is entirely plugin driven. All metrics are gathered from the 
# declared inputs, and sent to the declared outputs.
# 
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables. 
# 
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config 
# file would generate.
# 
# Environment variables can be used anywhere in this config file, simply surround 
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"), 
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})

# Global tags can be specified here in key="value" format.
[global_tags] 
# dc = "us-east-1" # will tag all metrics with dc=us-east-1 
# rack = "1a" 
## Environment variables can be used as tags, and throughout the config file
# user = "$USER"
# Configuration for telegraf agent
[agent] 
## Default data collection interval for all inputs
interval = "10s"
## Rounds collection interval to 'interval' 
## ie, if interval="10s" then always collect on :00, :10, :20, etc. 
round_interval = true 

## Telegraf will send metrics to outputs in batches of at most
## metric_batch_size metrics. 
## This controls the size of writes that Telegraf sends to output plugins.
metric_batch_size = 1000

## Maximum number of unwritten metrics per output.Increasing this value 
## allows for longer periods of output downtime without dropping metrics at the 
## cost of higher maximum memory usage. 
metric_buffer_limit = 10000 

## Collection jitter is used to jitter the collection by a random amount. 
## Each plugin will sleep for a random time within jitter before collecting.
## This can be used to avoid many plugins querying things like sysfs at the 
## same time, which can have a measurable effect on the system. 
collection_jitter = "0s"

## Default flushing interval for all outputs. Maximum flush_interval will be
## flush_interval + flush_jitter
flush_interval = "10s"
## Jitter the flush interval by a random amount. This is primarily to avoid 
## large write spikes for users running a large number of telegraf instances. 
## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s 
flush_jitter = "0s" 

## By default or when set to "0s", precision will be set to the same
## timestamp order as the collection interval, with the maximum being 1s. 
## ie, when interval = "10s", precision will be "1s"
## when interval = "250ms", precision will be "1ms" 
## Precision will NOT be used for service inputs. It is up to each individual 
## service input to set the timestamp at the appropriate precision. 
## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
precision = ""

## Log at debug level.
# debug = false 
## Log only error level messages. 
# quiet = false 

## Log target controls the destination for logs and can be one of "file", 
## "stderr" or, on Windows, "eventlog".When set to "file", the output file
## is determined by the "logfile" setting.
# logtarget = "file"

## Name of the file to be logged to when using the "file" logtarget.If set to 
## the empty string then logs are written to stderr.
# logfile = ""

## The logfile will be rotated after the time interval specified.When set 
## to 0 no time based rotation is performed.Logs are rotated only when 

## written to, if there is no log activity rotation may be delayed. 
# logfile_rotation_interval = "0d"

## The logfile will be rotated when it becomes larger than the specified
## size.When set to 0 no size based rotation is performed.
# logfile_rotation_max_size = "0MB" 

## Maximum number of rotated archives to keep, any older logs are deleted.
## If set to -1, no archives are removed. 
# logfile_rotation_max_archives = 5 

## Override default hostname, if empty use os.Hostname()
hostname = "" 
## If set to true, do no set the "host" tag in the telegraf agent.
omit_hostname = false

############################################################################### 
#OUTPUT PLUGINS # 
############################################################################### 


# Configuration for sending metrics to InfluxDB 
[[outputs.influxdb]]
## The full HTTP or UDP URL for your InfluxDB instance. 
##
## Multiple URLs can be specified for a single cluster, only ONE of the 
## urls will be written to each interval. 
# urls = ["unix:///var/run/influxdb.sock"]
urls = ["udp://127.0.0.1:8089"] 
# urls = ["http://127.0.0.1:8086"]

## The target database for metrics; will be created as needed.
## For UDP url endpoint database needs to be configured on server side. 
database = "docker_metrics" 

## The value of this tag will be used to determine the database.If this 
## tag is not set the 'database' option is used as the default. 
# database_tag = "" 

## If true, the 'database_tag' will not be included in the written metric.
# exclude_database_tag = false

## If true, no CREATE DATABASE queries will be sent.Set to true when using
## Telegraf with a user without permissions to create databases or when the 
## database already exists. 
# skip_database_creation = false

## Name of existing retention policy to write to.Empty string writes to 
## the default retention policy.Only takes effect when using HTTP.
# retention_policy = "" 

## The value of this tag will be used to determine the retention policy.If this 
## tag is not set the 'retention_policy' option is used as the default. 
# retention_policy_tag = "" 

## If true, the 'retention_policy_tag' will not be included in the written metric.
# exclude_retention_policy_tag = false

## Write consistency (clusters only), can be: "any", "one", "quorum", "all".
## Only takes effect when using HTTP. 
# write_consistency = "any"

## Timeout for HTTP messages. 
# timeout = "5s"

## HTTP Basic Auth
# username = "telegraf" 
# password = "metricsmetricsmetricsmetrics" 

username = "admin" 
password = "admin" 

## HTTP User-Agent
# user_agent = "telegraf" 

## UDP payload size is the maximum packet size to send. 
# udp_payload = "512B"

## Optional TLS Config for use on HTTP connections. 
# tls_ca = "/etc/telegraf/ca.pem" 
# tls_cert = "/etc/telegraf/cert.pem" 
# tls_key = "/etc/telegraf/key.pem" 
## Use TLS but skip chain & host verification 
# insecure_skip_verify = false

## HTTP Proxy override, if unset values the standard proxy environment
## variables are consulted to determine which proxy, if any, should be used.
# http_proxy = "http://corporate.proxy:3128"

## Additional HTTP headers
# http_headers = {"X-Special-Header" = "Special-Value"} 

## HTTP Content-Encoding for write request body, can be set to "gzip" to
## compress body or "identity" to apply no encoding.
# content_encoding = "gzip" 

## When true, Telegraf will output unsigned integers as unsigned values,
## i.e.: "42u".You will need a version of InfluxDB supporting unsigned
## integer values.Enabling this option will result in field type errors if
## existing data has been written.
# influx_uint_support = false 


# # Configuration for Amon Server to send metrics to. 
# [[outputs.amon]]
# ## Amon Server Key
# server_key = "my-server-key" # required.
# 
# ## Amon Instance URL
# amon_instance = "https://youramoninstance" # required 
# 
# ## Connection timeout.
# # timeout = "5s" 

# # Publishes metrics to an AMQP broker 
# [[outputs.amqp]]
# ## Broker to publish to.
# ## deprecated in 1.7; use the brokers option
# # url = "amqp://localhost:5672/influxdb"
# 
# ## Brokers to publish to.If multiple brokers are specified a random broker
# ## will be selected anytime a connection is established.This can be 
# ## helpful for load balancing when not using a dedicated load balancer. 
# brokers = ["amqp://localhost:5672/influxdb"]
# 
# ## Maximum messages to send over a connection.Once this is reached, the 
# ## connection is closed and a new connection is made.This can be helpful for
# ## load balancing when not using a dedicated load balancer. 
# # max_messages = 0
# 
# ## Exchange to declare and publish to.
# exchange = "telegraf" 
# 
# ## Exchange type; common types are "direct", "fanout", "topic", "header", "x-consistent-hash".
# # exchange_type = "topic" 
# 
# ## If true, exchange will be passively declared.
# # exchange_passive = false
# 
# ## Exchange durability can be either "transient" or "durable".
# # exchange_durability = "durable"

# ## Additional exchange arguments. 
# # exchange_arguments = { }
# # exchange_arguments = {"hash_property" = "timestamp"}
# 
# ## Authentication credentials for the PLAIN auth_method.
#username = "admin" 
#password = "admin" 
# 
# ## Auth method. PLAIN and EXTERNAL are supported
# ## Using EXTERNAL requires enabling the rabbitmq_auth_mechanism_ssl plugin as 
# ## described here: https://www.rabbitmq.com/plugins.html
# # auth_method = "PLAIN" 
# 
# ## Metric tag to use as a routing key.
# ## ie, if this tag exists, its value will be used as the routing key
# # routing_tag = "host"
# 
# ## Static routing key.Used when no routing_tag is set or as a fallback
# ## when the tag specified in routing tag is not found.
# # routing_key = ""
# # routing_key = "telegraf"
# 
# ## Delivery Mode controls if a published message is persistent. 
# ## One of "transient" or "persistent".
# # delivery_mode = "transient" 
# 
# ## InfluxDB database added as a message header. 
# ## deprecated in 1.7; use the headers option
# # database = "telegraf" 

# ## InfluxDB retention policy added as a message header
# ## deprecated in 1.7; use the headers option
# # retention_policy = "default"
# 
# ## Static headers added to each published message.
# # headers = { } 
# # headers = {"database" = "telegraf", "retention_policy" = "default"} 
# 
# ## Connection timeout.If not provided, will default to 5s.0s means no 
# ## timeout (not recommended). 
# # timeout = "5s"
# 
# ## Optional TLS Config
# # tls_ca = "/etc/telegraf/ca.pem" 
# # tls_cert = "/etc/telegraf/cert.pem" 
# # tls_key = "/etc/telegraf/key.pem" 
# ## Use TLS but skip chain & host verification 
# # insecure_skip_verify = false
# 
# ## If true use batch serialization format instead of line based delimiting. 
# ## Only applies to data formats which are not line based such as JSON.
# ## Recommended to set to true.
# # use_batch_format = false
# 
# ## Content encoding for message payloads, can be set to "gzip" to or
# ## "identity" to apply no encoding. 
# ##
# ## Please note that when use_batch_format = false each amqp message contains only 
# ## a single metric, it is recommended to use compression with batch format
# ## for best results.

# # content_encoding = "identity" 
# 
# ## Data format to output. 
# ## Each data format has its own unique set of configuration options, read 
# ## more about them here:
# ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md 
# # data_format = "influx"


# # Send metrics to Azure Application Insights
# [[outputs.application_insights]]
# ## Instrumentation key of the Application Insights resource.
# instrumentation_key = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx"
# 
# ## Regions that require endpoint modification https://docs.microsoft.com/en-us/azure/azure-monitor/app/custom-endpoints 
# # endpoint_url = "https://dc.services.visualstudio.com/v2/track"
# 
# ## Timeout for closing (default: 5s). 
# # timeout = "5s"
# 
# ## Enable additional diagnostic logging.
# # enable_diagnostic_logging = false 
# 
# ## Context Tag Sources add Application Insights context tags to a tag value.
# ##
# ## For list of allowed context tag keys see:
# ## https://github.com/Microsoft/ApplicationInsights-Go/blob/master/appinsights/contracts/contexttagkeys.go
# # [outputs.application_insights.context_tag_sources]
# # "ai.cloud.role" = "kubernetes_container_name" 
# # "ai.cloud.roleInstance" = "kubernetes_pod_name"
# # Send aggregate metrics to Azure Monitor 
# [[outputs.azure_monitor]] 
# ## Timeout for HTTP writes. 
# # timeout = "20s" 
# 
# ## Set the namespace prefix, defaults to "Telegraf/<input-name>". 
# # namespace_prefix = "Telegraf/"
# 
# ## Azure Monitor doesn't have a string value type, so convert string
# ## fields to dimensions (a.k.a. tags) if enabled. Azure Monitor allows
# ## a maximum of 10 dimensions so Telegraf will only send the first 10 
# ## alphanumeric dimensions. 
# # strings_as_dimensions = false 
# 
# ## Both region and resource_id must be set or be available via the
# ## Instance Metadata service on Azure Virtual Machines. 
# # 
# ## Azure Region to publish metrics against. 
# ## ex: region = "southcentralus"
# # region = "" 
# # 
# ## The Azure Resource ID against which metric will be logged, e.g.
# ## ex: resource_id = "/subscriptions/<subscription_id>/resourceGroups/<resource_group>/providers/Microsoft.Compute/virtualMachines/<vm_name>" 
# # resource_id = ""
# 
# ## Optionally, if in Azure US Government, China or other sovereign
# ## cloud environment, set appropriate REST endpoint for receiving 
# ## metrics. (Note: region may be unused in this context)
# # endpoint_url = "https://monitoring.core.usgovcloudapi.net"

# # Publish Telegraf metrics to a Google Cloud PubSub topic 
# [[outputs.cloud_pubsub]]
# ## Required. Name of Google Cloud Platform (GCP) Project that owns
# ## the given PubSub topic.
# project = "my-project"
# 
# ## Required. Name of PubSub topic to publish metrics to.
# topic = "my-topic"
# 
# ## Required. Data format to consume.
# ## Each data format has its own unique set of configuration options.
# ## Read more about them here: 
# ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
# data_format = "influx"
# 
# ## Optional. Filepath for GCP credentials JSON file to authorize calls to 
# ## PubSub APIs. If not set explicitly, Telegraf will attempt to use 
# ## Application Default Credentials, which is preferred. 
# # credentials_file = "path/to/my/creds.json"
# 
# ## Optional. If true, will send all metrics per write in one PubSub message.
# # send_batched = true 
# 
# ## The following publish_* parameters specifically configures batching
# ## requests made to the GCP Cloud PubSub API via the PubSub Golang library. Read
# ## more here: https://godoc.org/cloud.google.com/go/pubsub#PublishSettings
